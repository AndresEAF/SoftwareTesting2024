
memoriaIntento1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004270  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004450  08004450  000061a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004450  08004450  00005450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004458  08004458  000061a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800445c  0800445c  0000545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004460  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  080044c0  00006060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08004560  00006100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a460  200001a0  08004600  000061a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000a600  08004600  00006600  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013f20  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000276c  00000000  00000000  0001a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f80  00000000  00000000  0001c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c0c  00000000  00000000  0001d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000274ff  00000000  00000000  0001e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014381  00000000  00000000  000458eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1502  00000000  00000000  00059c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014b16e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000044ac  00000000  00000000  0014b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  0014f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001a0 	.word	0x200001a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004420 	.word	0x08004420

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001a4 	.word	0x200001a4
 8000204:	08004420 	.word	0x08004420

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f92f 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 f806 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f003 fbd8 	bl	8003cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f93b 	bl	80007ae <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f911 	bl	8000776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000000c 	.word	0x2000000c
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	200001bc 	.word	0x200001bc

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200001bc 	.word	0x200001bc

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff ffee 	bl	800059c <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_Delay+0x44>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005da:	bf00      	nop
 80005dc:	f7ff ffde 	bl	800059c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <__NVIC_SetPriorityGrouping+0x40>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	4313      	orrs	r3, r2
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	@ (800063c <__NVIC_SetPriorityGrouping+0x40>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	05fa0000 	.word	0x05fa0000

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	@ (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	@ (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	@ 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	@ 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f7ff ff8e 	bl	8000660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	@ (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff47 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff5c 	bl	8000644 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff8e 	bl	80006b4 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5d 	bl	8000660 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb0 	bl	800071c <SysTick_Config>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e086      	b.n	80008e8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d106      	bne.n	80007f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2223      	movs	r2, #35	@ 0x23
 80007e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f003 fa89 	bl	8003d04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b3f      	ldr	r3, [pc, #252]	@ (80008f0 <HAL_ETH_Init+0x128>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a3e      	ldr	r2, [pc, #248]	@ (80008f0 <HAL_ETH_Init+0x128>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fe:	4b3c      	ldr	r3, [pc, #240]	@ (80008f0 <HAL_ETH_Init+0x128>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800080a:	4b3a      	ldr	r3, [pc, #232]	@ (80008f4 <HAL_ETH_Init+0x12c>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4a39      	ldr	r2, [pc, #228]	@ (80008f4 <HAL_ETH_Init+0x12c>)
 8000810:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000814:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000816:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <HAL_ETH_Init+0x12c>)
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	4935      	ldr	r1, [pc, #212]	@ (80008f4 <HAL_ETH_Init+0x12c>)
 8000820:	4313      	orrs	r3, r2
 8000822:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000824:	4b33      	ldr	r3, [pc, #204]	@ (80008f4 <HAL_ETH_Init+0x12c>)
 8000826:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800083e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000840:	f7ff feac 	bl	800059c <HAL_GetTick>
 8000844:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000846:	e011      	b.n	800086c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000848:	f7ff fea8 	bl	800059c <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000856:	d909      	bls.n	800086c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2204      	movs	r2, #4
 800085c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	22e0      	movs	r2, #224	@ 0xe0
 8000864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e03d      	b.n	80008e8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1e4      	bne.n	8000848 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f97a 	bl	8000b78 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 fa25 	bl	8000cd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 fa7b 	bl	8000d86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	461a      	mov	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f9e3 	bl	8000c64 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80008ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_ETH_Init+0x130>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80008d2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2210      	movs	r2, #16
 80008e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40013800 	.word	0x40013800
 80008f8:	00020060 	.word	0x00020060

080008fc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <ETH_SetMACConfig+0x164>)
 8000912:	4013      	ands	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	7b9b      	ldrb	r3, [r3, #14]
 800091a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	7c12      	ldrb	r2, [r2, #16]
 8000920:	2a00      	cmp	r2, #0
 8000922:	d102      	bne.n	800092a <ETH_SetMACConfig+0x2e>
 8000924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000928:	e000      	b.n	800092c <ETH_SetMACConfig+0x30>
 800092a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800092c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	7c52      	ldrb	r2, [r2, #17]
 8000932:	2a00      	cmp	r2, #0
 8000934:	d102      	bne.n	800093c <ETH_SetMACConfig+0x40>
 8000936:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800093a:	e000      	b.n	800093e <ETH_SetMACConfig+0x42>
 800093c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800093e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8000944:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	7fdb      	ldrb	r3, [r3, #31]
 800094a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800094c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000952:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	7f92      	ldrb	r2, [r2, #30]
 8000958:	2a00      	cmp	r2, #0
 800095a:	d102      	bne.n	8000962 <ETH_SetMACConfig+0x66>
 800095c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000960:	e000      	b.n	8000964 <ETH_SetMACConfig+0x68>
 8000962:	2200      	movs	r2, #0
                        macconf->Speed |
 8000964:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	7f1b      	ldrb	r3, [r3, #28]
 800096a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800096c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000972:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800097a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000982:	2a00      	cmp	r2, #0
 8000984:	d102      	bne.n	800098c <ETH_SetMACConfig+0x90>
 8000986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800098a:	e000      	b.n	800098e <ETH_SetMACConfig+0x92>
 800098c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800098e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	7bdb      	ldrb	r3, [r3, #15]
 8000994:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000996:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800099c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80009a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80009a6:	4313      	orrs	r3, r2
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fdf8 	bl	80005b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80009da:	4013      	ands	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d101      	bne.n	80009f2 <ETH_SetMACConfig+0xf6>
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	e000      	b.n	80009f4 <ETH_SetMACConfig+0xf8>
 80009f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80009f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80009fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8000a02:	2a01      	cmp	r2, #1
 8000a04:	d101      	bne.n	8000a0a <ETH_SetMACConfig+0x10e>
 8000a06:	2208      	movs	r2, #8
 8000a08:	e000      	b.n	8000a0c <ETH_SetMACConfig+0x110>
 8000a0a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8000a0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8000a14:	2a01      	cmp	r2, #1
 8000a16:	d101      	bne.n	8000a1c <ETH_SetMACConfig+0x120>
 8000a18:	2204      	movs	r2, #4
 8000a1a:	e000      	b.n	8000a1e <ETH_SetMACConfig+0x122>
 8000a1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000a1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8000a26:	2a01      	cmp	r2, #1
 8000a28:	d101      	bne.n	8000a2e <ETH_SetMACConfig+0x132>
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	e000      	b.n	8000a30 <ETH_SetMACConfig+0x134>
 8000a2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000a30:	4313      	orrs	r3, r2
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fdb3 	bl	80005b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	619a      	str	r2, [r3, #24]
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	fd20810f 	.word	0xfd20810f

08000a64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b74 <ETH_SetDMAConfig+0x110>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	7b1b      	ldrb	r3, [r3, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <ETH_SetDMAConfig+0x2c>
 8000a8a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a8e:	e000      	b.n	8000a92 <ETH_SetDMAConfig+0x2e>
 8000a90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	7b5b      	ldrb	r3, [r3, #13]
 8000a96:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000a98:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	7f52      	ldrb	r2, [r2, #29]
 8000a9e:	2a00      	cmp	r2, #0
 8000aa0:	d102      	bne.n	8000aa8 <ETH_SetDMAConfig+0x44>
 8000aa2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000aa6:	e000      	b.n	8000aaa <ETH_SetDMAConfig+0x46>
 8000aa8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000aaa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	7b9b      	ldrb	r3, [r3, #14]
 8000ab0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000ab2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000ab8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	7f1b      	ldrb	r3, [r3, #28]
 8000abe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8000ac0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	7f9b      	ldrb	r3, [r3, #30]
 8000ac6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000ac8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000ace:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ad6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ae8:	461a      	mov	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fd5a 	bl	80005b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000b18:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8000b1e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000b24:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b2c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8000b2e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b34:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000b36:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000b3c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000b4a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fd2b 	bl	80005b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	f8de3f23 	.word	0xf8de3f23

08000b78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0a6      	sub	sp, #152	@ 0x98
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000be6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000bf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fe7f 	bl	80008fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8000c02:	2301      	movs	r3, #1
 8000c04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c32:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000c34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c38:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff05 	bl	8000a64 <ETH_SetDMAConfig>
}
 8000c5a:	bf00      	nop
 8000c5c:	3798      	adds	r7, #152	@ 0x98
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3305      	adds	r3, #5
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	3204      	adds	r2, #4
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <ETH_MACAddressConfig+0x68>)
 8000c86:	4413      	add	r3, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3303      	adds	r3, #3
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	061a      	lsls	r2, r3, #24
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <ETH_MACAddressConfig+0x6c>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	371c      	adds	r7, #28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40028040 	.word	0x40028040
 8000cd0:	40028044 	.word	0x40028044

08000cd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e03e      	b.n	8000d60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68d9      	ldr	r1, [r3, #12]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	3206      	adds	r2, #6
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d80c      	bhi.n	8000d44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68d9      	ldr	r1, [r3, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	e004      	b.n	8000d4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d9bd      	bls.n	8000ce2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d78:	611a      	str	r2, [r3, #16]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e048      	b.n	8000e26 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6919      	ldr	r1, [r3, #16]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	3212      	adds	r2, #18
 8000df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d80c      	bhi.n	8000e16 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6919      	ldr	r1, [r3, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	440b      	add	r3, r1
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	e004      	b.n	8000e20 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d9b3      	bls.n	8000d94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e56:	60da      	str	r2, [r3, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e175      	b.n	8001170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8164 	bne.w	800116a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x56>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80be 	beq.w	800116a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b66      	ldr	r3, [pc, #408]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a65      	ldr	r2, [pc, #404]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b63      	ldr	r3, [pc, #396]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001006:	4a61      	ldr	r2, [pc, #388]	@ (800118c <HAL_GPIO_Init+0x328>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <HAL_GPIO_Init+0x32c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d037      	beq.n	80010a2 <HAL_GPIO_Init+0x23e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a57      	ldr	r2, [pc, #348]	@ (8001194 <HAL_GPIO_Init+0x330>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d031      	beq.n	800109e <HAL_GPIO_Init+0x23a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a56      	ldr	r2, [pc, #344]	@ (8001198 <HAL_GPIO_Init+0x334>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d02b      	beq.n	800109a <HAL_GPIO_Init+0x236>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a55      	ldr	r2, [pc, #340]	@ (800119c <HAL_GPIO_Init+0x338>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x232>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a54      	ldr	r2, [pc, #336]	@ (80011a0 <HAL_GPIO_Init+0x33c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x22e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a53      	ldr	r2, [pc, #332]	@ (80011a4 <HAL_GPIO_Init+0x340>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x22a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a52      	ldr	r2, [pc, #328]	@ (80011a8 <HAL_GPIO_Init+0x344>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a51      	ldr	r2, [pc, #324]	@ (80011ac <HAL_GPIO_Init+0x348>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a50      	ldr	r2, [pc, #320]	@ (80011b0 <HAL_GPIO_Init+0x34c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	@ (80011b4 <HAL_GPIO_Init+0x350>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x21a>
 800107a:	2309      	movs	r3, #9
 800107c:	e012      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800107e:	230a      	movs	r3, #10
 8001080:	e010      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001082:	2308      	movs	r3, #8
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001086:	2307      	movs	r3, #7
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	@ (800118c <HAL_GPIO_Init+0x328>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a34      	ldr	r2, [pc, #208]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1f      	ldr	r2, [pc, #124]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_GPIO_Init+0x354>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae86 	bls.w	8000e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40022400 	.word	0x40022400
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	041a      	lsls	r2, r3, #16
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43d9      	mvns	r1, r3
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	400b      	ands	r3, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e08b      	b.n	800134e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f002 fe12 	bl	8003e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2224      	movs	r2, #36	@ 0x24
 8001254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e006      	b.n	80012ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d108      	bne.n	80012c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	e007      	b.n	80012d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_I2C_Init+0x134>)
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69d9      	ldr	r1, [r3, #28]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	02008000 	.word	0x02008000

0800135c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b20      	cmp	r3, #32
 8001370:	d138      	bne.n	80013e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800137c:	2302      	movs	r3, #2
 800137e:	e032      	b.n	80013e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2224      	movs	r2, #36	@ 0x24
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80013ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013e4:	2302      	movs	r3, #2
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b20      	cmp	r3, #32
 8001406:	d139      	bne.n	800147c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001412:	2302      	movs	r3, #2
 8001414:	e033      	b.n	800147e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2224      	movs	r2, #36	@ 0x24
 8001422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e000      	b.n	800147e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800147c:	2302      	movs	r3, #2
  }
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af02      	add	r7, sp, #8
 8001490:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e108      	b.n	80016ae <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f002 fd9c 	bl	8003ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ca:	d102      	bne.n	80014d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fef2 	bl	80032c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7c1a      	ldrb	r2, [r3, #16]
 80014e4:	f88d 2000 	strb.w	r2, [sp]
 80014e8:	3304      	adds	r3, #4
 80014ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ec:	f001 fe8e 	bl	800320c <USB_CoreInit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0d5      	b.n	80016ae <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f001 feea 	bl	80032e2 <USB_SetCurrentMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0c6      	b.n	80016ae <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e04a      	b.n	80015bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	3315      	adds	r3, #21
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3314      	adds	r3, #20
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	b298      	uxth	r0, r3
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	332e      	adds	r3, #46	@ 0x2e
 8001562:	4602      	mov	r2, r0
 8001564:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3318      	adds	r3, #24
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	331c      	adds	r3, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3320      	adds	r3, #32
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3324      	adds	r3, #36	@ 0x24
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	791b      	ldrb	r3, [r3, #4]
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d3af      	bcc.n	8001526 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e044      	b.n	8001656 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3b5      	bcc.n	80015cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7c1a      	ldrb	r2, [r3, #16]
 8001668:	f88d 2000 	strb.w	r2, [sp]
 800166c:	3304      	adds	r3, #4
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	f001 fe84 	bl	800337c <USB_DevInit>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e013      	b.n	80016ae <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d102      	bne.n	80016a2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f80b 	bl	80016b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f83f 	bl	800372a <USB_DevDisconnect>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_PCDEx_ActivateLPM+0x44>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	10000003 	.word	0x10000003

08001700 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <HAL_PWREx_EnableOverDrive+0x98>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_PWREx_EnableOverDrive+0x98>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	@ 0x40
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_PWREx_EnableOverDrive+0x98>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172e:	f7fe ff35 	bl	800059c <HAL_GetTick>
 8001732:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001734:	e009      	b.n	800174a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001736:	f7fe ff31 	bl	800059c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001744:	d901      	bls.n	800174a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e022      	b.n	8001790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001756:	d1ee      	bne.n	8001736 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001762:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7fe ff1a 	bl	800059c <HAL_GetTick>
 8001768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800176a:	e009      	b.n	8001780 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800176c:	f7fe ff16 	bl	800059c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800177a:	d901      	bls.n	8001780 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e007      	b.n	8001790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800178c:	d1ee      	bne.n	800176c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e291      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b96      	ldr	r3, [pc, #600]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d0:	4b93      	ldr	r3, [pc, #588]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
 80017dc:	4b90      	ldr	r3, [pc, #576]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b8d      	ldr	r3, [pc, #564]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x130>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d168      	bne.n	80018d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e26b      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x7a>
 800180c:	4b84      	ldr	r3, [pc, #528]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a83      	ldr	r2, [pc, #524]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x9c>
 8001822:	4b7f      	ldr	r3, [pc, #508]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7b      	ldr	r2, [pc, #492]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xc0>
 8001846:	4b76      	ldr	r3, [pc, #472]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b73      	ldr	r3, [pc, #460]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a72      	ldr	r2, [pc, #456]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 8001860:	4b6f      	ldr	r3, [pc, #444]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6e      	ldr	r2, [pc, #440]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6b      	ldr	r2, [pc, #428]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7fe fe8c 	bl	800059c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7fe fe88 	bl	800059c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e21f      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b61      	ldr	r3, [pc, #388]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7fe fe78 	bl	800059c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7fe fe74 	bl	800059c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e20b      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b57      	ldr	r3, [pc, #348]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x110>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d069      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b50      	ldr	r3, [pc, #320]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x190>
 80018f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1df      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	493d      	ldr	r1, [pc, #244]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e040      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a38      	ldr	r2, [pc, #224]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7fe fe2a 	bl	800059c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7fe fe26 	bl	800059c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1bd      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4929      	ldr	r1, [pc, #164]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
 800197e:	e018      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7fe fe06 	bl	800059c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7fe fe02 	bl	800059c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e199      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d038      	beq.n	8001a30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ca:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7fe fde3 	bl	800059c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7fe fddf 	bl	800059c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e176      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x23a>
 80019f8:	e01a      	b.n	8001a30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fe:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7fe fdc9 	bl	800059c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7fe fdc5 	bl	800059c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d903      	bls.n	8001a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e15c      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
 8001a20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b91      	ldr	r3, [pc, #580]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a4 	beq.w	8001b86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b88      	ldr	r3, [pc, #544]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a87      	ldr	r2, [pc, #540]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a66:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a72:	4b7f      	ldr	r3, [pc, #508]	@ (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7e      	ldr	r2, [pc, #504]	@ (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7fe fd8d 	bl	800059c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7fe fd89 	bl	800059c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	@ 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e120      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a98:	4b75      	ldr	r3, [pc, #468]	@ (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x31a>
 8001aac:	4b6f      	ldr	r3, [pc, #444]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x33c>
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	4a69      	ldr	r2, [pc, #420]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ace:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	4a66      	ldr	r2, [pc, #408]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x35e>
 8001ae4:	4b61      	ldr	r3, [pc, #388]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a60      	ldr	r2, [pc, #384]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001afe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b02:	4a5a      	ldr	r2, [pc, #360]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0a:	4b58      	ldr	r3, [pc, #352]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0e:	4a57      	ldr	r2, [pc, #348]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7fe fd3d 	bl	800059c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7fe fd39 	bl	800059c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0ce      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ee      	beq.n	8001b26 <HAL_RCC_OscConfig+0x386>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7fe fd27 	bl	800059c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe fd23 	bl	800059c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0b8      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4b40      	ldr	r3, [pc, #256]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a4 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d06b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d149      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a30      	ldr	r2, [pc, #192]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fcf4 	bl	800059c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe fcf0 	bl	800059c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e087      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe fcc4 	bl	800059c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7fe fcc0 	bl	800059c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e057      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x478>
 8001c36:	e04f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7fe fcaa 	bl	800059c <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe fca6 	bl	800059c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e03d      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4ac>
 8001c6a:	e035      	b.n	8001cd8 <HAL_RCC_OscConfig+0x538>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x544>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d028      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001caa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d111      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0d0      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b6a      	ldr	r3, [pc, #424]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d910      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b67      	ldr	r3, [pc, #412]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 020f 	bic.w	r2, r3, #15
 8001d16:	4965      	ldr	r1, [pc, #404]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b63      	ldr	r3, [pc, #396]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0b8      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d48:	4b59      	ldr	r3, [pc, #356]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a58      	ldr	r2, [pc, #352]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d60:	4b53      	ldr	r3, [pc, #332]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a52      	ldr	r2, [pc, #328]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b50      	ldr	r3, [pc, #320]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	494d      	ldr	r1, [pc, #308]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d040      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d115      	bne.n	8001dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e07f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e073      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e06b      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dca:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f023 0203 	bic.w	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4936      	ldr	r1, [pc, #216]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fbde 	bl	800059c <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7fe fbda 	bl	800059c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e053      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 020c 	and.w	r2, r3, #12
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1eb      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d210      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 020f 	bic.w	r2, r3, #15
 8001e22:	4922      	ldr	r1, [pc, #136]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e032      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4916      	ldr	r1, [pc, #88]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	490e      	ldr	r1, [pc, #56]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e7a:	f000 f821 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	490a      	ldr	r1, [pc, #40]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e8c:	5ccb      	ldrb	r3, [r1, r3]
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	4a09      	ldr	r2, [pc, #36]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <HAL_RCC_ClockConfig+0x1d4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb3a 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08004438 	.word	0x08004438
 8001eb8:	2000000c 	.word	0x2000000c
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec4:	b094      	sub	sp, #80	@ 0x50
 8001ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ecc:	2300      	movs	r3, #0
 8001ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed8:	4b79      	ldr	r3, [pc, #484]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d00d      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	f200 80e1 	bhi.w	80020ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d003      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ef2:	e0db      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	4b73      	ldr	r3, [pc, #460]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ef8:	e0db      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001efa:	4b73      	ldr	r3, [pc, #460]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001efe:	e0d8      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f00:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f16:	4b6a      	ldr	r3, [pc, #424]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	099b      	lsrs	r3, r3, #6
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0159      	lsls	r1, r3, #5
 8001f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f44:	0150      	lsls	r0, r2, #5
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	1a51      	subs	r1, r2, r1
 8001f4e:	6139      	str	r1, [r7, #16]
 8001f50:	4629      	mov	r1, r5
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f64:	4659      	mov	r1, fp
 8001f66:	018b      	lsls	r3, r1, #6
 8001f68:	4651      	mov	r1, sl
 8001f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f6e:	4651      	mov	r1, sl
 8001f70:	018a      	lsls	r2, r1, #6
 8001f72:	4651      	mov	r1, sl
 8001f74:	ebb2 0801 	subs.w	r8, r2, r1
 8001f78:	4659      	mov	r1, fp
 8001f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f92:	4690      	mov	r8, r2
 8001f94:	4699      	mov	r9, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	eb18 0303 	adds.w	r3, r8, r3
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	eb49 0303 	adc.w	r3, r9, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	024b      	lsls	r3, r1, #9
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	024a      	lsls	r2, r1, #9
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fd0:	f7fe f91a 	bl	8000208 <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fdc:	e058      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fde:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4611      	mov	r1, r2
 8001fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	f04f 0000 	mov.w	r0, #0
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	0159      	lsls	r1, r3, #5
 8002006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800200a:	0150      	lsls	r0, r2, #5
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4641      	mov	r1, r8
 8002012:	ebb2 0a01 	subs.w	sl, r2, r1
 8002016:	4649      	mov	r1, r9
 8002018:	eb63 0b01 	sbc.w	fp, r3, r1
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800202c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002030:	ebb2 040a 	subs.w	r4, r2, sl
 8002034:	eb63 050b 	sbc.w	r5, r3, fp
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	00eb      	lsls	r3, r5, #3
 8002042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002046:	00e2      	lsls	r2, r4, #3
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4643      	mov	r3, r8
 800204e:	18e3      	adds	r3, r4, r3
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	464b      	mov	r3, r9
 8002054:	eb45 0303 	adc.w	r3, r5, r3
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002066:	4629      	mov	r1, r5
 8002068:	028b      	lsls	r3, r1, #10
 800206a:	4621      	mov	r1, r4
 800206c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002070:	4621      	mov	r1, r4
 8002072:	028a      	lsls	r2, r1, #10
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	2200      	movs	r2, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	61fa      	str	r2, [r7, #28]
 8002080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002084:	f7fe f8c0 	bl	8000208 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4613      	mov	r3, r2
 800208e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80020a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020aa:	e002      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3750      	adds	r7, #80	@ 0x50
 80020b8:	46bd      	mov	sp, r7
 80020ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	@ (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	08004448 	.word	0x08004448

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002110:	f7ff ffdc 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0b5b      	lsrs	r3, r3, #13
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	@ (8002130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	08004448 	.word	0x08004448

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800215c:	4b69      	ldr	r3, [pc, #420]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a68      	ldr	r2, [pc, #416]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002166:	6093      	str	r3, [r2, #8]
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	4964      	ldr	r1, [pc, #400]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d017      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002194:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219c:	4959      	ldr	r1, [pc, #356]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ac:	d101      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d017      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	494a      	ldr	r1, [pc, #296]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002206:	2301      	movs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 808b 	beq.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b3a      	ldr	r3, [pc, #232]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	4a39      	ldr	r2, [pc, #228]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	@ 0x40
 8002224:	4b37      	ldr	r3, [pc, #220]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002230:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a34      	ldr	r2, [pc, #208]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223c:	f7fe f9ae 	bl	800059c <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7fe f9aa 	bl	800059c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e357      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002256:	4b2c      	ldr	r3, [pc, #176]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002262:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d035      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d02e      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002280:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229a:	4a1a      	ldr	r2, [pc, #104]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022a2:	4a18      	ldr	r2, [pc, #96]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022a8:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d114      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe f972 	bl	800059c <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe f96e 	bl	800059c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e319      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0ee      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022ea:	d111      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f8:	4b04      	ldr	r3, [pc, #16]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	4901      	ldr	r1, [pc, #4]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
 8002302:	e00b      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	0ffffcff 	.word	0x0ffffcff
 8002310:	4baa      	ldr	r3, [pc, #680]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4aa9      	ldr	r2, [pc, #676]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800231a:	6093      	str	r3, [r2, #8]
 800231c:	4ba7      	ldr	r3, [pc, #668]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	49a4      	ldr	r1, [pc, #656]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800232a:	4313      	orrs	r3, r2
 800232c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800233a:	4ba0      	ldr	r3, [pc, #640]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002340:	4a9e      	ldr	r2, [pc, #632]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002346:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800234a:	4b9c      	ldr	r3, [pc, #624]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800234c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002354:	4999      	ldr	r1, [pc, #612]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002368:	4b94      	ldr	r3, [pc, #592]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002376:	4991      	ldr	r1, [pc, #580]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238a:	4b8c      	ldr	r3, [pc, #560]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002398:	4988      	ldr	r1, [pc, #544]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ac:	4b83      	ldr	r3, [pc, #524]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ba:	4980      	ldr	r1, [pc, #512]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ce:	4b7b      	ldr	r3, [pc, #492]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4977      	ldr	r1, [pc, #476]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f0:	4b72      	ldr	r3, [pc, #456]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	496f      	ldr	r1, [pc, #444]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002412:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f023 020c 	bic.w	r2, r3, #12
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	4966      	ldr	r1, [pc, #408]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002434:	4b61      	ldr	r3, [pc, #388]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	495e      	ldr	r1, [pc, #376]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002456:	4b59      	ldr	r3, [pc, #356]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002464:	4955      	ldr	r1, [pc, #340]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002478:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	494d      	ldr	r1, [pc, #308]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800249a:	4b48      	ldr	r3, [pc, #288]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	4944      	ldr	r1, [pc, #272]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024bc:	4b3f      	ldr	r3, [pc, #252]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	493c      	ldr	r1, [pc, #240]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ec:	4933      	ldr	r1, [pc, #204]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002500:	4b2e      	ldr	r3, [pc, #184]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002506:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800250e:	492b      	ldr	r1, [pc, #172]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d011      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002522:	4b26      	ldr	r3, [pc, #152]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002528:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002530:	4922      	ldr	r1, [pc, #136]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800253c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002562:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002568:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002570:	4912      	ldr	r1, [pc, #72]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002584:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002594:	4909      	ldr	r1, [pc, #36]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d006      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80d9 	beq.w	8002762 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025b0:	4b02      	ldr	r3, [pc, #8]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a01      	ldr	r2, [pc, #4]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025ba:	e001      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c2:	f7fd ffeb 	bl	800059c <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025ca:	f7fd ffe7 	bl	800059c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	@ 0x64
 80025d6:	d901      	bls.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e194      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d021      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11d      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025fc:	4b64      	ldr	r3, [pc, #400]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800260a:	4b61      	ldr	r3, [pc, #388]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002610:	0e1b      	lsrs	r3, r3, #24
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	019a      	lsls	r2, r3, #6
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	071b      	lsls	r3, r3, #28
 8002630:	4957      	ldr	r1, [pc, #348]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02e      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002662:	d129      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002664:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002678:	0f1b      	lsrs	r3, r3, #28
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	019a      	lsls	r2, r3, #6
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	071b      	lsls	r3, r3, #28
 8002698:	493d      	ldr	r1, [pc, #244]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a6:	f023 021f 	bic.w	r2, r3, #31
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	3b01      	subs	r3, #1
 80026b0:	4937      	ldr	r1, [pc, #220]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01d      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c4:	4b32      	ldr	r3, [pc, #200]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ca:	0e1b      	lsrs	r3, r3, #24
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026d8:	0f1b      	lsrs	r3, r3, #28
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	019a      	lsls	r2, r3, #6
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	071b      	lsls	r3, r3, #28
 80026f8:	4925      	ldr	r1, [pc, #148]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d011      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	019a      	lsls	r2, r3, #6
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	071b      	lsls	r3, r3, #28
 8002728:	4919      	ldr	r1, [pc, #100]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002730:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800273a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7fd ff2e 	bl	800059c <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002744:	f7fd ff2a 	bl	800059c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0d7      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	f040 80cd 	bne.w	8002904 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002776:	f7fd ff11 	bl	800059c <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800277e:	f7fd ff0d 	bl	800059c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	@ 0x64
 800278a:	d903      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0ba      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002790:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002794:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a0:	d0ed      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02e      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d12a      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ca:	4b51      	ldr	r3, [pc, #324]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	0f1b      	lsrs	r3, r3, #28
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	019a      	lsls	r2, r3, #6
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	071b      	lsls	r3, r3, #28
 80027fe:	4944      	ldr	r1, [pc, #272]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002806:	4b42      	ldr	r3, [pc, #264]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800280c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	493d      	ldr	r1, [pc, #244]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d022      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002834:	d11d      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002836:	4b36      	ldr	r3, [pc, #216]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002844:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	0f1b      	lsrs	r3, r3, #28
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	019a      	lsls	r2, r3, #6
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	4929      	ldr	r1, [pc, #164]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d028      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800287e:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	0e1b      	lsrs	r3, r3, #24
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800288c:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	019a      	lsls	r2, r3, #6
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	431a      	orrs	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	4917      	ldr	r1, [pc, #92]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	4911      	ldr	r1, [pc, #68]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028dc:	f7fd fe5e 	bl	800059c <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028e4:	f7fd fe5a 	bl	800059c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e007      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002902:	d1ef      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e040      	b.n	80029a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f001 fafc 	bl	8003f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa8c 	bl	8002e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f825 	bl	80029b0 <UART_SetConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e01b      	b.n	80029a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800297e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800298e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb0b 	bl	8002fbc <UART_CheckIdleState>
 80029a6:	4603      	mov	r3, r0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4ba6      	ldr	r3, [pc, #664]	@ (8002c74 <UART_SetConfig+0x2c4>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	6979      	ldr	r1, [r7, #20]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a94      	ldr	r2, [pc, #592]	@ (8002c78 <UART_SetConfig+0x2c8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d120      	bne.n	8002a6e <UART_SetConfig+0xbe>
 8002a2c:	4b93      	ldr	r3, [pc, #588]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d816      	bhi.n	8002a68 <UART_SetConfig+0xb8>
 8002a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <UART_SetConfig+0x90>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a5d 	.word	0x08002a5d
 8002a48:	08002a57 	.word	0x08002a57
 8002a4c:	08002a63 	.word	0x08002a63
 8002a50:	2301      	movs	r3, #1
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	e150      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002a56:	2302      	movs	r3, #2
 8002a58:	77fb      	strb	r3, [r7, #31]
 8002a5a:	e14d      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e14a      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002a62:	2308      	movs	r3, #8
 8002a64:	77fb      	strb	r3, [r7, #31]
 8002a66:	e147      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002a68:	2310      	movs	r3, #16
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e144      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a83      	ldr	r2, [pc, #524]	@ (8002c80 <UART_SetConfig+0x2d0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d132      	bne.n	8002ade <UART_SetConfig+0x12e>
 8002a78:	4b80      	ldr	r3, [pc, #512]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d828      	bhi.n	8002ad8 <UART_SetConfig+0x128>
 8002a86:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <UART_SetConfig+0xdc>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002ad9 	.word	0x08002ad9
 8002a94:	08002ad9 	.word	0x08002ad9
 8002a98:	08002ad9 	.word	0x08002ad9
 8002a9c:	08002acd 	.word	0x08002acd
 8002aa0:	08002ad9 	.word	0x08002ad9
 8002aa4:	08002ad9 	.word	0x08002ad9
 8002aa8:	08002ad9 	.word	0x08002ad9
 8002aac:	08002ac7 	.word	0x08002ac7
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002ad9 	.word	0x08002ad9
 8002ab8:	08002ad9 	.word	0x08002ad9
 8002abc:	08002ad3 	.word	0x08002ad3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e118      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e115      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002acc:	2304      	movs	r3, #4
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e112      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e10f      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e10c      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a68      	ldr	r2, [pc, #416]	@ (8002c84 <UART_SetConfig+0x2d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d120      	bne.n	8002b2a <UART_SetConfig+0x17a>
 8002ae8:	4b64      	ldr	r3, [pc, #400]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002af2:	2b30      	cmp	r3, #48	@ 0x30
 8002af4:	d013      	beq.n	8002b1e <UART_SetConfig+0x16e>
 8002af6:	2b30      	cmp	r3, #48	@ 0x30
 8002af8:	d814      	bhi.n	8002b24 <UART_SetConfig+0x174>
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d009      	beq.n	8002b12 <UART_SetConfig+0x162>
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d810      	bhi.n	8002b24 <UART_SetConfig+0x174>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <UART_SetConfig+0x15c>
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d006      	beq.n	8002b18 <UART_SetConfig+0x168>
 8002b0a:	e00b      	b.n	8002b24 <UART_SetConfig+0x174>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e0f2      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b12:	2302      	movs	r3, #2
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e0ef      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e0ec      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	77fb      	strb	r3, [r7, #31]
 8002b22:	e0e9      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b24:	2310      	movs	r3, #16
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e0e6      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a56      	ldr	r2, [pc, #344]	@ (8002c88 <UART_SetConfig+0x2d8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d120      	bne.n	8002b76 <UART_SetConfig+0x1c6>
 8002b34:	4b51      	ldr	r3, [pc, #324]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b40:	d013      	beq.n	8002b6a <UART_SetConfig+0x1ba>
 8002b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b44:	d814      	bhi.n	8002b70 <UART_SetConfig+0x1c0>
 8002b46:	2b80      	cmp	r3, #128	@ 0x80
 8002b48:	d009      	beq.n	8002b5e <UART_SetConfig+0x1ae>
 8002b4a:	2b80      	cmp	r3, #128	@ 0x80
 8002b4c:	d810      	bhi.n	8002b70 <UART_SetConfig+0x1c0>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <UART_SetConfig+0x1a8>
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d006      	beq.n	8002b64 <UART_SetConfig+0x1b4>
 8002b56:	e00b      	b.n	8002b70 <UART_SetConfig+0x1c0>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e0cc      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e0c9      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b64:	2304      	movs	r3, #4
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e0c6      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e0c3      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b70:	2310      	movs	r3, #16
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e0c0      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a44      	ldr	r2, [pc, #272]	@ (8002c8c <UART_SetConfig+0x2dc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d125      	bne.n	8002bcc <UART_SetConfig+0x21c>
 8002b80:	4b3e      	ldr	r3, [pc, #248]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b8e:	d017      	beq.n	8002bc0 <UART_SetConfig+0x210>
 8002b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b94:	d817      	bhi.n	8002bc6 <UART_SetConfig+0x216>
 8002b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9a:	d00b      	beq.n	8002bb4 <UART_SetConfig+0x204>
 8002b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ba0:	d811      	bhi.n	8002bc6 <UART_SetConfig+0x216>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <UART_SetConfig+0x1fe>
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d006      	beq.n	8002bba <UART_SetConfig+0x20a>
 8002bac:	e00b      	b.n	8002bc6 <UART_SetConfig+0x216>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e0a1      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e09e      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e09b      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e098      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002bc6:	2310      	movs	r3, #16
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e095      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c90 <UART_SetConfig+0x2e0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d125      	bne.n	8002c22 <UART_SetConfig+0x272>
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002be0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002be4:	d017      	beq.n	8002c16 <UART_SetConfig+0x266>
 8002be6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bea:	d817      	bhi.n	8002c1c <UART_SetConfig+0x26c>
 8002bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bf0:	d00b      	beq.n	8002c0a <UART_SetConfig+0x25a>
 8002bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bf6:	d811      	bhi.n	8002c1c <UART_SetConfig+0x26c>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <UART_SetConfig+0x254>
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c00:	d006      	beq.n	8002c10 <UART_SetConfig+0x260>
 8002c02:	e00b      	b.n	8002c1c <UART_SetConfig+0x26c>
 8002c04:	2301      	movs	r3, #1
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e076      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e073      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c10:	2304      	movs	r3, #4
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e070      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c16:	2308      	movs	r3, #8
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e06d      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e06a      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <UART_SetConfig+0x2e4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d138      	bne.n	8002c9e <UART_SetConfig+0x2ee>
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <UART_SetConfig+0x2cc>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c3a:	d017      	beq.n	8002c6c <UART_SetConfig+0x2bc>
 8002c3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c40:	d82a      	bhi.n	8002c98 <UART_SetConfig+0x2e8>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c46:	d00b      	beq.n	8002c60 <UART_SetConfig+0x2b0>
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c4c:	d824      	bhi.n	8002c98 <UART_SetConfig+0x2e8>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <UART_SetConfig+0x2aa>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c56:	d006      	beq.n	8002c66 <UART_SetConfig+0x2b6>
 8002c58:	e01e      	b.n	8002c98 <UART_SetConfig+0x2e8>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77fb      	strb	r3, [r7, #31]
 8002c5e:	e04b      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c60:	2302      	movs	r3, #2
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e048      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c66:	2304      	movs	r3, #4
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e045      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e042      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c72:	bf00      	nop
 8002c74:	efff69f3 	.word	0xefff69f3
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40004400 	.word	0x40004400
 8002c84:	40004800 	.word	0x40004800
 8002c88:	40004c00 	.word	0x40004c00
 8002c8c:	40005000 	.word	0x40005000
 8002c90:	40011400 	.word	0x40011400
 8002c94:	40007800 	.word	0x40007800
 8002c98:	2310      	movs	r3, #16
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e02c      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a72      	ldr	r2, [pc, #456]	@ (8002e6c <UART_SetConfig+0x4bc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d125      	bne.n	8002cf4 <UART_SetConfig+0x344>
 8002ca8:	4b71      	ldr	r3, [pc, #452]	@ (8002e70 <UART_SetConfig+0x4c0>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cb6:	d017      	beq.n	8002ce8 <UART_SetConfig+0x338>
 8002cb8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cbc:	d817      	bhi.n	8002cee <UART_SetConfig+0x33e>
 8002cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc2:	d00b      	beq.n	8002cdc <UART_SetConfig+0x32c>
 8002cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc8:	d811      	bhi.n	8002cee <UART_SetConfig+0x33e>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <UART_SetConfig+0x326>
 8002cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd2:	d006      	beq.n	8002ce2 <UART_SetConfig+0x332>
 8002cd4:	e00b      	b.n	8002cee <UART_SetConfig+0x33e>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	77fb      	strb	r3, [r7, #31]
 8002cda:	e00d      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	77fb      	strb	r3, [r7, #31]
 8002ce0:	e00a      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	77fb      	strb	r3, [r7, #31]
 8002ce6:	e007      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002ce8:	2308      	movs	r3, #8
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e004      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002cee:	2310      	movs	r3, #16
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e001      	b.n	8002cf8 <UART_SetConfig+0x348>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d00:	d15b      	bne.n	8002dba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d828      	bhi.n	8002d5a <UART_SetConfig+0x3aa>
 8002d08:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <UART_SetConfig+0x360>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d5b 	.word	0x08002d5b
 8002d20:	08002d4b 	.word	0x08002d4b
 8002d24:	08002d5b 	.word	0x08002d5b
 8002d28:	08002d5b 	.word	0x08002d5b
 8002d2c:	08002d5b 	.word	0x08002d5b
 8002d30:	08002d53 	.word	0x08002d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7ff f9d6 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002d38:	61b8      	str	r0, [r7, #24]
        break;
 8002d3a:	e013      	b.n	8002d64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7ff f9e6 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8002d40:	61b8      	str	r0, [r7, #24]
        break;
 8002d42:	e00f      	b.n	8002d64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d44:	4b4b      	ldr	r3, [pc, #300]	@ (8002e74 <UART_SetConfig+0x4c4>)
 8002d46:	61bb      	str	r3, [r7, #24]
        break;
 8002d48:	e00c      	b.n	8002d64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4a:	f7ff f8b9 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8002d4e:	61b8      	str	r0, [r7, #24]
        break;
 8002d50:	e008      	b.n	8002d64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d56:	61bb      	str	r3, [r7, #24]
        break;
 8002d58:	e004      	b.n	8002d64 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	77bb      	strb	r3, [r7, #30]
        break;
 8002d62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d074      	beq.n	8002e54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	005a      	lsls	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d916      	bls.n	8002db4 <UART_SetConfig+0x404>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8c:	d212      	bcs.n	8002db4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f023 030f 	bic.w	r3, r3, #15
 8002d96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	89fb      	ldrh	r3, [r7, #14]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	89fa      	ldrh	r2, [r7, #14]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	e04f      	b.n	8002e54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	77bb      	strb	r3, [r7, #30]
 8002db8:	e04c      	b.n	8002e54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d828      	bhi.n	8002e12 <UART_SetConfig+0x462>
 8002dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc8 <UART_SetConfig+0x418>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002ded 	.word	0x08002ded
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002dfd 	.word	0x08002dfd
 8002dd4:	08002e13 	.word	0x08002e13
 8002dd8:	08002e03 	.word	0x08002e03
 8002ddc:	08002e13 	.word	0x08002e13
 8002de0:	08002e13 	.word	0x08002e13
 8002de4:	08002e13 	.word	0x08002e13
 8002de8:	08002e0b 	.word	0x08002e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff f97a 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002df0:	61b8      	str	r0, [r7, #24]
        break;
 8002df2:	e013      	b.n	8002e1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7ff f98a 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8002df8:	61b8      	str	r0, [r7, #24]
        break;
 8002dfa:	e00f      	b.n	8002e1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <UART_SetConfig+0x4c4>)
 8002dfe:	61bb      	str	r3, [r7, #24]
        break;
 8002e00:	e00c      	b.n	8002e1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e02:	f7ff f85d 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8002e06:	61b8      	str	r0, [r7, #24]
        break;
 8002e08:	e008      	b.n	8002e1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e004      	b.n	8002e1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77bb      	strb	r3, [r7, #30]
        break;
 8002e1a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d018      	beq.n	8002e54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085a      	lsrs	r2, r3, #1
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d909      	bls.n	8002e50 <UART_SetConfig+0x4a0>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e42:	d205      	bcs.n	8002e50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	e001      	b.n	8002e54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e60:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40007c00 	.word	0x40007c00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400

08002e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01a      	beq.n	8002f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f76:	d10a      	bne.n	8002f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	@ 0x30
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fcc:	f7fd fae6 	bl	800059c <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d12e      	bne.n	800303e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f83b 	bl	800306a <UART_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d021      	beq.n	800303e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	60fb      	str	r3, [r7, #12]
   return(result);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	617b      	str	r3, [r7, #20]
   return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e6      	bne.n	8002ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e011      	b.n	8003062 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3728      	adds	r7, #40	@ 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307a:	e04f      	b.n	800311c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d04b      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fd fa8a 	bl	800059c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <UART_WaitOnFlagUntilTimeout+0x30>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04e      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d037      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0xb2>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d034      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0xb2>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b40      	cmp	r3, #64	@ 0x40
 80030b6:	d031      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d110      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2208      	movs	r2, #8
 80030cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f838 	bl	8003144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2208      	movs	r2, #8
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e029      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f6:	d111      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003100:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f81e 	bl	8003144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e00f      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	429a      	cmp	r2, r3
 8003138:	d0a0      	beq.n	800307c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003144:	b480      	push	{r7}
 8003146:	b095      	sub	sp, #84	@ 0x54
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800316a:	643b      	str	r3, [r7, #64]	@ 0x40
 800316c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003170:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e6      	bne.n	800314c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3308      	adds	r3, #8
 8003184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	61fb      	str	r3, [r7, #28]
   return(result);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3308      	adds	r3, #8
 800319c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800319e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e5      	bne.n	800317e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d118      	bne.n	80031ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f023 0310 	bic.w	r3, r3, #16
 80031ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	613b      	str	r3, [r7, #16]
   return(result);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e6      	bne.n	80031ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003200:	bf00      	nop
 8003202:	3754      	adds	r7, #84	@ 0x54
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800320c:	b084      	sub	sp, #16
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	f107 001c 	add.w	r0, r7, #28
 800321a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003222:	2b01      	cmp	r3, #1
 8003224:	d121      	bne.n	800326a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <USB_CoreInit+0xb0>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800324a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa92 	bl	8003788 <USB_CoreReset>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e010      	b.n	800328c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa86 	bl	8003788 <USB_CoreReset>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800328c:	7fbb      	ldrb	r3, [r7, #30]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10b      	bne.n	80032aa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f043 0206 	orr.w	r2, r3, #6
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032b6:	b004      	add	sp, #16
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	ffbdffbf 	.word	0xffbdffbf

080032c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 0201 	bic.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d115      	bne.n	8003330 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003310:	200a      	movs	r0, #10
 8003312:	f7fd f94f 	bl	80005b4 <HAL_Delay>
      ms += 10U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	330a      	adds	r3, #10
 800331a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fa25 	bl	800376c <USB_GetMode>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d01e      	beq.n	8003366 <USB_SetCurrentMode+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2bc7      	cmp	r3, #199	@ 0xc7
 800332c:	d9f0      	bls.n	8003310 <USB_SetCurrentMode+0x2e>
 800332e:	e01a      	b.n	8003366 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003342:	200a      	movs	r0, #10
 8003344:	f7fd f936 	bl	80005b4 <HAL_Delay>
      ms += 10U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	330a      	adds	r3, #10
 800334c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa0c 	bl	800376c <USB_GetMode>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <USB_SetCurrentMode+0x84>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2bc7      	cmp	r3, #199	@ 0xc7
 800335e:	d9f0      	bls.n	8003342 <USB_SetCurrentMode+0x60>
 8003360:	e001      	b.n	8003366 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e005      	b.n	8003372 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2bc8      	cmp	r3, #200	@ 0xc8
 800336a:	d101      	bne.n	8003370 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800337c:	b084      	sub	sp, #16
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800338a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e009      	b.n	80033b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	3340      	adds	r3, #64	@ 0x40
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	3301      	adds	r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0e      	cmp	r3, #14
 80033b4:	d9f2      	bls.n	800339c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11c      	bne.n	80033f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e005      	b.n	8003404 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800340a:	461a      	mov	r2, r3
 800340c:	2300      	movs	r3, #0
 800340e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003410:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10d      	bne.n	8003434 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003420:	2100      	movs	r1, #0
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f968 	bl	80036f8 <USB_SetDevSpeed>
 8003428:	e008      	b.n	800343c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800342a:	2101      	movs	r1, #1
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f963 	bl	80036f8 <USB_SetDevSpeed>
 8003432:	e003      	b.n	800343c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003434:	2103      	movs	r1, #3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f95e 	bl	80036f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800343c:	2110      	movs	r1, #16
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8fa 	bl	8003638 <USB_FlushTxFifo>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f924 	bl	800369c <USB_FlushRxFifo>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003464:	461a      	mov	r2, r3
 8003466:	2300      	movs	r3, #0
 8003468:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003470:	461a      	mov	r2, r3
 8003472:	2300      	movs	r3, #0
 8003474:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800347c:	461a      	mov	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	e043      	b.n	8003510 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800349e:	d118      	bne.n	80034d2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b2:	461a      	mov	r2, r3
 80034b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e013      	b.n	80034e4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c8:	461a      	mov	r2, r3
 80034ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e008      	b.n	80034e4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034de:	461a      	mov	r2, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f0:	461a      	mov	r2, r3
 80034f2:	2300      	movs	r3, #0
 80034f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003502:	461a      	mov	r2, r3
 8003504:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003508:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3301      	adds	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003514:	461a      	mov	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4293      	cmp	r3, r2
 800351a:	d3b5      	bcc.n	8003488 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	e043      	b.n	80035aa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003538:	d118      	bne.n	800356c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e013      	b.n	800357e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e008      	b.n	800357e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003578:	461a      	mov	r2, r3
 800357a:	2300      	movs	r3, #0
 800357c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3301      	adds	r3, #1
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035ae:	461a      	mov	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d3b5      	bcc.n	8003522 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80035d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80035d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <USB_DevInit+0x2b4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80035f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f043 0208 	orr.w	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800360c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <USB_DevInit+0x2b8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800362c:	b004      	add	sp, #16
 800362e:	4770      	bx	lr
 8003630:	803c3800 	.word	0x803c3800
 8003634:	40000004 	.word	0x40000004

08003638 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3301      	adds	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003652:	d901      	bls.n	8003658 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e01b      	b.n	8003690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	daf2      	bge.n	8003646 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	019b      	lsls	r3, r3, #6
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800367c:	d901      	bls.n	8003682 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e006      	b.n	8003690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b20      	cmp	r3, #32
 800368c:	d0f0      	beq.n	8003670 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3301      	adds	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036b4:	d901      	bls.n	80036ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e018      	b.n	80036ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	daf2      	bge.n	80036a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2210      	movs	r2, #16
 80036ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036d8:	d901      	bls.n	80036de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e006      	b.n	80036ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d0f0      	beq.n	80036cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003744:	f023 0303 	bic.w	r3, r3, #3
 8003748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0301 	and.w	r3, r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037a0:	d901      	bls.n	80037a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e01b      	b.n	80037de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	daf2      	bge.n	8003794 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037ca:	d901      	bls.n	80037d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e006      	b.n	80037de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d0f0      	beq.n	80037be <USB_CoreReset+0x36>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <getFreeSRAM>:




// Declare a function to calculate free SRAM
size_t getFreeSRAM() {
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80037f2:	f3ef 8308 	mrs	r3, MSP
 80037f6:	603b      	str	r3, [r7, #0]
  return(result);
 80037f8:	683b      	ldr	r3, [r7, #0]
    // Symbols provided by the linker script
    extern uint8_t _end;    // End of the heap
    extern uint8_t _estack; // End of SRAM (start of the stack)
    uint8_t* sp = (uint8_t*)__get_MSP(); // Main Stack Pointer (MSP)
 80037fa:	607b      	str	r3, [r7, #4]

    // Calculate free SRAM as the space between the end of the heap and current stack pointer
    return (size_t)(sp - &_end);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <getFreeSRAM+0x24>)
 8003800:	1a9b      	subs	r3, r3, r2
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000a600 	.word	0x2000a600

08003814 <stressTestSRAM>:
size_t freeSRAM;
uint8_t* allocations[10000]; // Array to store pointers to allocated memory
size_t allocationSize = 256; // Allocate in 256-byte chunks (adjust as needed)
size_t i = 0;

void stressTestSRAM() {
 8003814:	b598      	push	{r3, r4, r7, lr}
 8003816:	af00      	add	r7, sp, #0

    while (1) {
        allocations[i] = (uint8_t*)malloc(allocationSize);
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <stressTestSRAM+0x54>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a13      	ldr	r2, [pc, #76]	@ (800386c <stressTestSRAM+0x58>)
 800381e:	6814      	ldr	r4, [r2, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fd03 	bl	800422c <malloc>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <stressTestSRAM+0x5c>)
 800382c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        if (allocations[i] != NULL) {
 8003830:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <stressTestSRAM+0x58>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <stressTestSRAM+0x5c>)
 8003836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <stressTestSRAM+0x4e>
        	freeSRAM=getFreeSRAM(); //Check current free SRAM
 800383e:	f7ff ffd5 	bl	80037ec <getFreeSRAM>
 8003842:	4603      	mov	r3, r0
 8003844:	4a0b      	ldr	r2, [pc, #44]	@ (8003874 <stressTestSRAM+0x60>)
 8003846:	6013      	str	r3, [r2, #0]
        	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003848:	2101      	movs	r1, #1
 800384a:	480b      	ldr	r0, [pc, #44]	@ (8003878 <stressTestSRAM+0x64>)
 800384c:	f7fd fccf 	bl	80011ee <HAL_GPIO_TogglePin>
            i++;
 8003850:	4b06      	ldr	r3, [pc, #24]	@ (800386c <stressTestSRAM+0x58>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <stressTestSRAM+0x58>)
 8003858:	6013      	str	r3, [r2, #0]
        } else {
            //printf("Allocation failed! Out of memory.\n");
            break; // Stop if we run out of SRAM
        }

        HAL_Delay(100); // Delay to slow down the allocation rate (adjust as needed)
 800385a:	2064      	movs	r0, #100	@ 0x64
 800385c:	f7fc feaa 	bl	80005b4 <HAL_Delay>
        allocations[i] = (uint8_t*)malloc(allocationSize);
 8003860:	e7da      	b.n	8003818 <stressTestSRAM+0x4>
            break; // Stop if we run out of SRAM
 8003862:	bf00      	nop

    // Free allocated memory after test (optional)
    //for (size_t j = 0; j < i; j++) {
    //  free(allocations[j]);
    //}
}
 8003864:	bf00      	nop
 8003866:	bd98      	pop	{r3, r4, r7, pc}
 8003868:	20000008 	.word	0x20000008
 800386c:	2000a4a8 	.word	0x2000a4a8
 8003870:	20000868 	.word	0x20000868
 8003874:	20000864 	.word	0x20000864
 8003878:	40020400 	.word	0x40020400

0800387c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003880:	f7fc fe3a 	bl	80004f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003884:	f000 f81a 	bl	80038bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003888:	f000 f970 	bl	8003b6c <MX_GPIO_Init>
  MX_ETH_Init();
 800388c:	f000 f882 	bl	8003994 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8003890:	f000 f90e 	bl	8003ab0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003894:	f000 f93c 	bl	8003b10 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8003898:	f000 f8ca 	bl	8003a30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //memset(TxBuffer,0x1,5120);
  //memset(TrBuffer,0x1,5120);
  stressTestSRAM();
 800389c:	f7ff ffba 	bl	8003814 <stressTestSRAM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	freeSRAM=getFreeSRAM();
 80038a0:	f7ff ffa4 	bl	80037ec <getFreeSRAM>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4a04      	ldr	r2, [pc, #16]	@ (80038b8 <main+0x3c>)
 80038a8:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000); // Check SRAM every second
 80038aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038ae:	f7fc fe81 	bl	80005b4 <HAL_Delay>
	freeSRAM=getFreeSRAM();
 80038b2:	bf00      	nop
 80038b4:	e7f4      	b.n	80038a0 <main+0x24>
 80038b6:	bf00      	nop
 80038b8:	20000864 	.word	0x20000864

080038bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b094      	sub	sp, #80	@ 0x50
 80038c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038c2:	f107 0320 	add.w	r3, r7, #32
 80038c6:	2230      	movs	r2, #48	@ 0x30
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fd64 	bl	8004398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <SystemClock_Config+0xd0>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	4a29      	ldr	r2, [pc, #164]	@ (800398c <SystemClock_Config+0xd0>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ec:	4b27      	ldr	r3, [pc, #156]	@ (800398c <SystemClock_Config+0xd0>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <SystemClock_Config+0xd4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a24      	ldr	r2, [pc, #144]	@ (8003990 <SystemClock_Config+0xd4>)
 80038fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <SystemClock_Config+0xd4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003910:	2301      	movs	r3, #1
 8003912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003914:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800391a:	2302      	movs	r3, #2
 800391c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800391e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003924:	2304      	movs	r3, #4
 8003926:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003928:	23d8      	movs	r3, #216	@ 0xd8
 800392a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800392c:	2302      	movs	r3, #2
 800392e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003930:	2309      	movs	r3, #9
 8003932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003934:	f107 0320 	add.w	r3, r7, #32
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd ff31 	bl	80017a0 <HAL_RCC_OscConfig>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003944:	f000 f9b4 	bl	8003cb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003948:	f7fd feda 	bl	8001700 <HAL_PWREx_EnableOverDrive>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003952:	f000 f9ad 	bl	8003cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003956:	230f      	movs	r3, #15
 8003958:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800395a:	2302      	movs	r3, #2
 800395c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003962:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800396c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	2107      	movs	r1, #7
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f9b7 	bl	8001ce8 <HAL_RCC_ClockConfig>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003980:	f000 f996 	bl	8003cb0 <Error_Handler>
  }
}
 8003984:	bf00      	nop
 8003986:	3750      	adds	r7, #80	@ 0x50
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000

08003994 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003998:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <MX_ETH_Init+0x84>)
 800399a:	4a20      	ldr	r2, [pc, #128]	@ (8003a1c <MX_ETH_Init+0x88>)
 800399c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80039a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039a6:	2280      	movs	r2, #128	@ 0x80
 80039a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80039aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039ac:	22e1      	movs	r2, #225	@ 0xe1
 80039ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80039bc:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80039c2:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <MX_ETH_Init+0x84>)
 80039c4:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <MX_ETH_Init+0x8c>)
 80039c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80039c8:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <MX_ETH_Init+0x84>)
 80039ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <MX_ETH_Init+0x84>)
 80039d2:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <MX_ETH_Init+0x90>)
 80039d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <MX_ETH_Init+0x84>)
 80039d8:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <MX_ETH_Init+0x94>)
 80039da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <MX_ETH_Init+0x84>)
 80039de:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80039e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80039e4:	480c      	ldr	r0, [pc, #48]	@ (8003a18 <MX_ETH_Init+0x84>)
 80039e6:	f7fc feef 	bl	80007c8 <HAL_ETH_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80039f0:	f000 f95e 	bl	8003cb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80039f4:	2238      	movs	r2, #56	@ 0x38
 80039f6:	2100      	movs	r1, #0
 80039f8:	480c      	ldr	r0, [pc, #48]	@ (8003a2c <MX_ETH_Init+0x98>)
 80039fa:	f000 fccd 	bl	8004398 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80039fe:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <MX_ETH_Init+0x98>)
 8003a00:	2221      	movs	r2, #33	@ 0x21
 8003a02:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <MX_ETH_Init+0x98>)
 8003a06:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003a0a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <MX_ETH_Init+0x98>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200001f8 	.word	0x200001f8
 8003a1c:	40028000 	.word	0x40028000
 8003a20:	2000a4ac 	.word	0x2000a4ac
 8003a24:	20000100 	.word	0x20000100
 8003a28:	20000060 	.word	0x20000060
 8003a2c:	200001c0 	.word	0x200001c0

08003a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a36:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <MX_I2C1_Init+0x78>)
 8003a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <MX_I2C1_Init+0x7c>)
 8003a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a46:	4b17      	ldr	r3, [pc, #92]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a4c:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a52:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a58:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a64:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a6a:	480e      	ldr	r0, [pc, #56]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a6c:	f7fd fbda 	bl	8001224 <HAL_I2C_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a76:	f000 f91b 	bl	8003cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4809      	ldr	r0, [pc, #36]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a7e:	f7fd fc6d 	bl	800135c <HAL_I2CEx_ConfigAnalogFilter>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a88:	f000 f912 	bl	8003cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4805      	ldr	r0, [pc, #20]	@ (8003aa4 <MX_I2C1_Init+0x74>)
 8003a90:	f7fd fcaf 	bl	80013f2 <HAL_I2CEx_ConfigDigitalFilter>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a9a:	f000 f909 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200002a8 	.word	0x200002a8
 8003aa8:	40005400 	.word	0x40005400
 8003aac:	20404768 	.word	0x20404768

08003ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ab4:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <MX_USART3_UART_Init+0x5c>)
 8003ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003aba:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac2:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ace:	4b0e      	ldr	r3, [pc, #56]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003ad6:	220c      	movs	r2, #12
 8003ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ada:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003af2:	4805      	ldr	r0, [pc, #20]	@ (8003b08 <MX_USART3_UART_Init+0x58>)
 8003af4:	f7fe ff0e 	bl	8002914 <HAL_UART_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003afe:	f000 f8d7 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200002fc 	.word	0x200002fc
 8003b0c:	40004800 	.word	0x40004800

08003b10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003b1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b1e:	2206      	movs	r2, #6
 8003b20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003b22:	4b11      	ldr	r3, [pc, #68]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b24:	2202      	movs	r2, #2
 8003b26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b30:	2202      	movs	r2, #2
 8003b32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003b40:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003b46:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003b52:	4805      	ldr	r0, [pc, #20]	@ (8003b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b54:	f7fd fc99 	bl	800148a <HAL_PCD_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003b5e:	f000 f8a7 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000384 	.word	0x20000384

08003b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	@ 0x30
 8003b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b82:	4b47      	ldr	r3, [pc, #284]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	4a46      	ldr	r2, [pc, #280]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b35      	ldr	r3, [pc, #212]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd6:	4b32      	ldr	r3, [pc, #200]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c06:	4b26      	ldr	r3, [pc, #152]	@ (8003ca0 <MX_GPIO_Init+0x134>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	f244 0181 	movw	r1, #16513	@ 0x4081
 8003c18:	4822      	ldr	r0, [pc, #136]	@ (8003ca4 <MX_GPIO_Init+0x138>)
 8003c1a:	f7fd facf 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2140      	movs	r1, #64	@ 0x40
 8003c22:	4821      	ldr	r0, [pc, #132]	@ (8003ca8 <MX_GPIO_Init+0x13c>)
 8003c24:	f7fd faca 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003c38:	f107 031c 	add.w	r3, r7, #28
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	481b      	ldr	r0, [pc, #108]	@ (8003cac <MX_GPIO_Init+0x140>)
 8003c40:	f7fd f910 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003c44:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4811      	ldr	r0, [pc, #68]	@ (8003ca4 <MX_GPIO_Init+0x138>)
 8003c5e:	f7fd f901 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003c62:	2340      	movs	r3, #64	@ 0x40
 8003c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c66:	2301      	movs	r3, #1
 8003c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	4619      	mov	r1, r3
 8003c78:	480b      	ldr	r0, [pc, #44]	@ (8003ca8 <MX_GPIO_Init+0x13c>)
 8003c7a:	f7fd f8f3 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4805      	ldr	r0, [pc, #20]	@ (8003ca8 <MX_GPIO_Init+0x13c>)
 8003c92:	f7fd f8e7 	bl	8000e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c96:	bf00      	nop
 8003c98:	3730      	adds	r7, #48	@ 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40021800 	.word	0x40021800
 8003cac:	40020800 	.word	0x40020800

08003cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb4:	b672      	cpsid	i
}
 8003cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <Error_Handler+0x8>

08003cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <HAL_MspInit+0x44>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003d00 <HAL_MspInit+0x44>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cce:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <HAL_MspInit+0x44>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cda:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_MspInit+0x44>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	4a08      	ldr	r2, [pc, #32]	@ (8003d00 <HAL_MspInit+0x44>)
 8003ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_MspInit+0x44>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800

08003d04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08e      	sub	sp, #56	@ 0x38
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a4e      	ldr	r2, [pc, #312]	@ (8003e5c <HAL_ETH_MspInit+0x158>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	f040 8096 	bne.w	8003e54 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003d28:	4b4d      	ldr	r3, [pc, #308]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d34:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	4a46      	ldr	r2, [pc, #280]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4c:	4b44      	ldr	r3, [pc, #272]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	4a40      	ldr	r2, [pc, #256]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d64:	4b3e      	ldr	r3, [pc, #248]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d70:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	4a3a      	ldr	r2, [pc, #232]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d7c:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d88:	4b35      	ldr	r3, [pc, #212]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	4a34      	ldr	r2, [pc, #208]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d94:	4b32      	ldr	r3, [pc, #200]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da0:	4b2f      	ldr	r3, [pc, #188]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	4a2e      	ldr	r2, [pc, #184]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dac:	4b2c      	ldr	r3, [pc, #176]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003db8:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	4a28      	ldr	r2, [pc, #160]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc4:	4b26      	ldr	r3, [pc, #152]	@ (8003e60 <HAL_ETH_MspInit+0x15c>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003dd0:	2332      	movs	r3, #50	@ 0x32
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003de0:	230b      	movs	r3, #11
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de8:	4619      	mov	r1, r3
 8003dea:	481e      	ldr	r0, [pc, #120]	@ (8003e64 <HAL_ETH_MspInit+0x160>)
 8003dec:	f7fd f83a 	bl	8000e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003df0:	2386      	movs	r3, #134	@ 0x86
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e00:	230b      	movs	r3, #11
 8003e02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4817      	ldr	r0, [pc, #92]	@ (8003e68 <HAL_ETH_MspInit+0x164>)
 8003e0c:	f7fd f82a 	bl	8000e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e22:	230b      	movs	r3, #11
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	480f      	ldr	r0, [pc, #60]	@ (8003e6c <HAL_ETH_MspInit+0x168>)
 8003e2e:	f7fd f819 	bl	8000e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003e32:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e40:	2303      	movs	r3, #3
 8003e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e44:	230b      	movs	r3, #11
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4808      	ldr	r0, [pc, #32]	@ (8003e70 <HAL_ETH_MspInit+0x16c>)
 8003e50:	f7fd f808 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8003e54:	bf00      	nop
 8003e56:	3738      	adds	r7, #56	@ 0x38
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40028000 	.word	0x40028000
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	40020400 	.word	0x40020400
 8003e70:	40021800 	.word	0x40021800

08003e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b0aa      	sub	sp, #168	@ 0xa8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e8c:	f107 0310 	add.w	r3, r7, #16
 8003e90:	2284      	movs	r2, #132	@ 0x84
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fa7f 	bl	8004398 <memset>
  if(hi2c->Instance==I2C1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a22      	ldr	r2, [pc, #136]	@ (8003f28 <HAL_I2C_MspInit+0xb4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d13c      	bne.n	8003f1e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003ea4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eae:	f107 0310 	add.w	r3, r7, #16
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe f93e 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003ebe:	f7ff fef7 	bl	8003cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <HAL_I2C_MspInit+0xb8>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <HAL_I2C_MspInit+0xb8>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ece:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <HAL_I2C_MspInit+0xb8>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee2:	2312      	movs	r3, #18
 8003ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003efa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003efe:	4619      	mov	r1, r3
 8003f00:	480b      	ldr	r0, [pc, #44]	@ (8003f30 <HAL_I2C_MspInit+0xbc>)
 8003f02:	f7fc ffaf 	bl	8000e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f06:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_I2C_MspInit+0xb8>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	@ (8003f2c <HAL_I2C_MspInit+0xb8>)
 8003f0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <HAL_I2C_MspInit+0xb8>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003f1e:	bf00      	nop
 8003f20:	37a8      	adds	r7, #168	@ 0xa8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40005400 	.word	0x40005400
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40020400 	.word	0x40020400

08003f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0aa      	sub	sp, #168	@ 0xa8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f4c:	f107 0310 	add.w	r3, r7, #16
 8003f50:	2284      	movs	r2, #132	@ 0x84
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa1f 	bl	8004398 <memset>
  if(huart->Instance==USART3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <HAL_UART_MspInit+0xb4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d13c      	bne.n	8003fde <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f6e:	f107 0310 	add.w	r3, r7, #16
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe f8de 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f7e:	f7ff fe97 	bl	8003cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <HAL_UART_MspInit+0xb8>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	4a19      	ldr	r2, [pc, #100]	@ (8003fec <HAL_UART_MspInit+0xb8>)
 8003f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f8e:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <HAL_UART_MspInit+0xb8>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9a:	4b14      	ldr	r3, [pc, #80]	@ (8003fec <HAL_UART_MspInit+0xb8>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <HAL_UART_MspInit+0xb8>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa6:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_UART_MspInit+0xb8>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003fb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003fb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fcc:	2307      	movs	r3, #7
 8003fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4805      	ldr	r0, [pc, #20]	@ (8003ff0 <HAL_UART_MspInit+0xbc>)
 8003fda:	f7fc ff43 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003fde:	bf00      	nop
 8003fe0:	37a8      	adds	r7, #168	@ 0xa8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40020c00 	.word	0x40020c00

08003ff4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b0ac      	sub	sp, #176	@ 0xb0
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800400c:	f107 0318 	add.w	r3, r7, #24
 8004010:	2284      	movs	r2, #132	@ 0x84
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f9bf 	bl	8004398 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004022:	d159      	bne.n	80040d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004024:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004028:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004030:	f107 0318 	add.w	r3, r7, #24
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe f87d 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004040:	f7ff fe36 	bl	8003cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004044:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004050:	4b23      	ldr	r3, [pc, #140]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800405c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004064:	2302      	movs	r3, #2
 8004066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004076:	230a      	movs	r3, #10
 8004078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004080:	4619      	mov	r1, r3
 8004082:	4818      	ldr	r0, [pc, #96]	@ (80040e4 <HAL_PCD_MspInit+0xf0>)
 8004084:	f7fc feee 	bl	8000e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800408c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800409c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040a0:	4619      	mov	r1, r3
 80040a2:	4810      	ldr	r0, [pc, #64]	@ (80040e4 <HAL_PCD_MspInit+0xf0>)
 80040a4:	f7fc fede 	bl	8000e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040a8:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 80040aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ac:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 80040ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80040b4:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 80040b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 80040c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c4:	4a06      	ldr	r2, [pc, #24]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 80040c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80040cc:	4b04      	ldr	r3, [pc, #16]	@ (80040e0 <HAL_PCD_MspInit+0xec>)
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80040d8:	bf00      	nop
 80040da:	37b0      	adds	r7, #176	@ 0xb0
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020000 	.word	0x40020000

080040e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <NMI_Handler+0x4>

080040f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <HardFault_Handler+0x4>

080040f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <MemManage_Handler+0x4>

08004100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <BusFault_Handler+0x4>

08004108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <UsageFault_Handler+0x4>

08004110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800413e:	f7fc fa19 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <_sbrk+0x5c>)
 8004152:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <_sbrk+0x60>)
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800415c:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <_sbrk+0x64>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <_sbrk+0x64>)
 8004166:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <_sbrk+0x68>)
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <_sbrk+0x64>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d207      	bcs.n	8004188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004178:	f000 f926 	bl	80043c8 <__errno>
 800417c:	4603      	mov	r3, r0
 800417e:	220c      	movs	r2, #12
 8004180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	e009      	b.n	800419c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004188:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <_sbrk+0x64>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800418e:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <_sbrk+0x64>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	4a05      	ldr	r2, [pc, #20]	@ (80041ac <_sbrk+0x64>)
 8004198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20050000 	.word	0x20050000
 80041a8:	00000400 	.word	0x00000400
 80041ac:	2000a4b4 	.word	0x2000a4b4
 80041b0:	2000a600 	.word	0x2000a600

080041b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <SystemInit+0x20>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <SystemInit+0x20>)
 80041c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004210 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041dc:	f7ff ffea 	bl	80041b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041e0:	480c      	ldr	r0, [pc, #48]	@ (8004214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041e2:	490d      	ldr	r1, [pc, #52]	@ (8004218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041e4:	4a0d      	ldr	r2, [pc, #52]	@ (800421c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041e8:	e002      	b.n	80041f0 <LoopCopyDataInit>

080041ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ee:	3304      	adds	r3, #4

080041f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041f4:	d3f9      	bcc.n	80041ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80041f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80041fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041fc:	e001      	b.n	8004202 <LoopFillZerobss>

080041fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004200:	3204      	adds	r2, #4

08004202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004204:	d3fb      	bcc.n	80041fe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004206:	f000 f8e5 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800420a:	f7ff fb37 	bl	800387c <main>
  bx  lr    
 800420e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004210:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004218:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800421c:	08004460 	.word	0x08004460
  ldr r2, =_sbss
 8004220:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8004224:	2000a600 	.word	0x2000a600

08004228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004228:	e7fe      	b.n	8004228 <ADC_IRQHandler>
	...

0800422c <malloc>:
 800422c:	4b02      	ldr	r3, [pc, #8]	@ (8004238 <malloc+0xc>)
 800422e:	4601      	mov	r1, r0
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	f000 b825 	b.w	8004280 <_malloc_r>
 8004236:	bf00      	nop
 8004238:	20000010 	.word	0x20000010

0800423c <sbrk_aligned>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4e0f      	ldr	r6, [pc, #60]	@ (800427c <sbrk_aligned+0x40>)
 8004240:	460c      	mov	r4, r1
 8004242:	6831      	ldr	r1, [r6, #0]
 8004244:	4605      	mov	r5, r0
 8004246:	b911      	cbnz	r1, 800424e <sbrk_aligned+0x12>
 8004248:	f000 f8ae 	bl	80043a8 <_sbrk_r>
 800424c:	6030      	str	r0, [r6, #0]
 800424e:	4621      	mov	r1, r4
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f8a9 	bl	80043a8 <_sbrk_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d103      	bne.n	8004262 <sbrk_aligned+0x26>
 800425a:	f04f 34ff 	mov.w	r4, #4294967295
 800425e:	4620      	mov	r0, r4
 8004260:	bd70      	pop	{r4, r5, r6, pc}
 8004262:	1cc4      	adds	r4, r0, #3
 8004264:	f024 0403 	bic.w	r4, r4, #3
 8004268:	42a0      	cmp	r0, r4
 800426a:	d0f8      	beq.n	800425e <sbrk_aligned+0x22>
 800426c:	1a21      	subs	r1, r4, r0
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f89a 	bl	80043a8 <_sbrk_r>
 8004274:	3001      	adds	r0, #1
 8004276:	d1f2      	bne.n	800425e <sbrk_aligned+0x22>
 8004278:	e7ef      	b.n	800425a <sbrk_aligned+0x1e>
 800427a:	bf00      	nop
 800427c:	2000a4b8 	.word	0x2000a4b8

08004280 <_malloc_r>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	1ccd      	adds	r5, r1, #3
 8004286:	f025 0503 	bic.w	r5, r5, #3
 800428a:	3508      	adds	r5, #8
 800428c:	2d0c      	cmp	r5, #12
 800428e:	bf38      	it	cc
 8004290:	250c      	movcc	r5, #12
 8004292:	2d00      	cmp	r5, #0
 8004294:	4606      	mov	r6, r0
 8004296:	db01      	blt.n	800429c <_malloc_r+0x1c>
 8004298:	42a9      	cmp	r1, r5
 800429a:	d904      	bls.n	80042a6 <_malloc_r+0x26>
 800429c:	230c      	movs	r3, #12
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	2000      	movs	r0, #0
 80042a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800437c <_malloc_r+0xfc>
 80042aa:	f000 f869 	bl	8004380 <__malloc_lock>
 80042ae:	f8d8 3000 	ldr.w	r3, [r8]
 80042b2:	461c      	mov	r4, r3
 80042b4:	bb44      	cbnz	r4, 8004308 <_malloc_r+0x88>
 80042b6:	4629      	mov	r1, r5
 80042b8:	4630      	mov	r0, r6
 80042ba:	f7ff ffbf 	bl	800423c <sbrk_aligned>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	4604      	mov	r4, r0
 80042c2:	d158      	bne.n	8004376 <_malloc_r+0xf6>
 80042c4:	f8d8 4000 	ldr.w	r4, [r8]
 80042c8:	4627      	mov	r7, r4
 80042ca:	2f00      	cmp	r7, #0
 80042cc:	d143      	bne.n	8004356 <_malloc_r+0xd6>
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	d04b      	beq.n	800436a <_malloc_r+0xea>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	4639      	mov	r1, r7
 80042d6:	4630      	mov	r0, r6
 80042d8:	eb04 0903 	add.w	r9, r4, r3
 80042dc:	f000 f864 	bl	80043a8 <_sbrk_r>
 80042e0:	4581      	cmp	r9, r0
 80042e2:	d142      	bne.n	800436a <_malloc_r+0xea>
 80042e4:	6821      	ldr	r1, [r4, #0]
 80042e6:	1a6d      	subs	r5, r5, r1
 80042e8:	4629      	mov	r1, r5
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7ff ffa6 	bl	800423c <sbrk_aligned>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d03a      	beq.n	800436a <_malloc_r+0xea>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	442b      	add	r3, r5
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	f8d8 3000 	ldr.w	r3, [r8]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	bb62      	cbnz	r2, 800435c <_malloc_r+0xdc>
 8004302:	f8c8 7000 	str.w	r7, [r8]
 8004306:	e00f      	b.n	8004328 <_malloc_r+0xa8>
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	1b52      	subs	r2, r2, r5
 800430c:	d420      	bmi.n	8004350 <_malloc_r+0xd0>
 800430e:	2a0b      	cmp	r2, #11
 8004310:	d917      	bls.n	8004342 <_malloc_r+0xc2>
 8004312:	1961      	adds	r1, r4, r5
 8004314:	42a3      	cmp	r3, r4
 8004316:	6025      	str	r5, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	6059      	strne	r1, [r3, #4]
 800431c:	6863      	ldr	r3, [r4, #4]
 800431e:	bf08      	it	eq
 8004320:	f8c8 1000 	streq.w	r1, [r8]
 8004324:	5162      	str	r2, [r4, r5]
 8004326:	604b      	str	r3, [r1, #4]
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f82f 	bl	800438c <__malloc_unlock>
 800432e:	f104 000b 	add.w	r0, r4, #11
 8004332:	1d23      	adds	r3, r4, #4
 8004334:	f020 0007 	bic.w	r0, r0, #7
 8004338:	1ac2      	subs	r2, r0, r3
 800433a:	bf1c      	itt	ne
 800433c:	1a1b      	subne	r3, r3, r0
 800433e:	50a3      	strne	r3, [r4, r2]
 8004340:	e7af      	b.n	80042a2 <_malloc_r+0x22>
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	42a3      	cmp	r3, r4
 8004346:	bf0c      	ite	eq
 8004348:	f8c8 2000 	streq.w	r2, [r8]
 800434c:	605a      	strne	r2, [r3, #4]
 800434e:	e7eb      	b.n	8004328 <_malloc_r+0xa8>
 8004350:	4623      	mov	r3, r4
 8004352:	6864      	ldr	r4, [r4, #4]
 8004354:	e7ae      	b.n	80042b4 <_malloc_r+0x34>
 8004356:	463c      	mov	r4, r7
 8004358:	687f      	ldr	r7, [r7, #4]
 800435a:	e7b6      	b.n	80042ca <_malloc_r+0x4a>
 800435c:	461a      	mov	r2, r3
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	42a3      	cmp	r3, r4
 8004362:	d1fb      	bne.n	800435c <_malloc_r+0xdc>
 8004364:	2300      	movs	r3, #0
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	e7de      	b.n	8004328 <_malloc_r+0xa8>
 800436a:	230c      	movs	r3, #12
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	4630      	mov	r0, r6
 8004370:	f000 f80c 	bl	800438c <__malloc_unlock>
 8004374:	e794      	b.n	80042a0 <_malloc_r+0x20>
 8004376:	6005      	str	r5, [r0, #0]
 8004378:	e7d6      	b.n	8004328 <_malloc_r+0xa8>
 800437a:	bf00      	nop
 800437c:	2000a4bc 	.word	0x2000a4bc

08004380 <__malloc_lock>:
 8004380:	4801      	ldr	r0, [pc, #4]	@ (8004388 <__malloc_lock+0x8>)
 8004382:	f000 b84b 	b.w	800441c <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	2000a5fc 	.word	0x2000a5fc

0800438c <__malloc_unlock>:
 800438c:	4801      	ldr	r0, [pc, #4]	@ (8004394 <__malloc_unlock+0x8>)
 800438e:	f000 b846 	b.w	800441e <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	2000a5fc 	.word	0x2000a5fc

08004398 <memset>:
 8004398:	4402      	add	r2, r0
 800439a:	4603      	mov	r3, r0
 800439c:	4293      	cmp	r3, r2
 800439e:	d100      	bne.n	80043a2 <memset+0xa>
 80043a0:	4770      	bx	lr
 80043a2:	f803 1b01 	strb.w	r1, [r3], #1
 80043a6:	e7f9      	b.n	800439c <memset+0x4>

080043a8 <_sbrk_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4d06      	ldr	r5, [pc, #24]	@ (80043c4 <_sbrk_r+0x1c>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	602b      	str	r3, [r5, #0]
 80043b4:	f7ff fec8 	bl	8004148 <_sbrk>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_sbrk_r+0x1a>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_sbrk_r+0x1a>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	2000a5f8 	.word	0x2000a5f8

080043c8 <__errno>:
 80043c8:	4b01      	ldr	r3, [pc, #4]	@ (80043d0 <__errno+0x8>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000010 	.word	0x20000010

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4d0d      	ldr	r5, [pc, #52]	@ (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004410 <__libc_init_array+0x3c>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2600      	movs	r6, #0
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004418 <__libc_init_array+0x44>)
 80043e8:	f000 f81a 	bl	8004420 <_init>
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2600      	movs	r6, #0
 80043f2:	42a6      	cmp	r6, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fc:	4798      	blx	r3
 80043fe:	3601      	adds	r6, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f855 3b04 	ldr.w	r3, [r5], #4
 8004406:	4798      	blx	r3
 8004408:	3601      	adds	r6, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	08004458 	.word	0x08004458
 8004410:	08004458 	.word	0x08004458
 8004414:	08004458 	.word	0x08004458
 8004418:	0800445c 	.word	0x0800445c

0800441c <__retarget_lock_acquire_recursive>:
 800441c:	4770      	bx	lr

0800441e <__retarget_lock_release_recursive>:
 800441e:	4770      	bx	lr

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
